// Code generated by MockGen. DO NOT EDIT.
// Source: handlers.go

// Package handlers is a generated GoMock package.
package handlers

import (
	context "context"
	reflect "reflect"

	entity "github.com/NikitaBarysh/metrics_and_alertinc/internal/entity"
	gomock "github.com/golang/mock/gomock"
)

// Mockstorage is a mock of storage interface.
type Mockstorage struct {
	ctrl     *gomock.Controller
	recorder *MockstorageMockRecorder
}

// MockstorageMockRecorder is the mock recorder for Mockstorage.
type MockstorageMockRecorder struct {
	mock *Mockstorage
}

// NewMockstorage creates a new mock instance.
func NewMockstorage(ctrl *gomock.Controller) *Mockstorage {
	mock := &Mockstorage{ctrl: ctrl}
	mock.recorder = &MockstorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockstorage) EXPECT() *MockstorageMockRecorder {
	return m.recorder
}

// CheckPing mocks base method.
func (m *Mockstorage) CheckPing(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPing", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckPing indicates an expected call of CheckPing.
func (mr *MockstorageMockRecorder) CheckPing(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPing", reflect.TypeOf((*Mockstorage)(nil).CheckPing), ctx)
}

// GetAllMetric mocks base method.
func (m *Mockstorage) GetAllMetric() ([]entity.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMetric")
	ret0, _ := ret[0].([]entity.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMetric indicates an expected call of GetAllMetric.
func (mr *MockstorageMockRecorder) GetAllMetric() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMetric", reflect.TypeOf((*Mockstorage)(nil).GetAllMetric))
}

// GetMetric mocks base method.
func (m *Mockstorage) GetMetric(key string) (entity.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetric", key)
	ret0, _ := ret[0].(entity.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetric indicates an expected call of GetMetric.
func (mr *MockstorageMockRecorder) GetMetric(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetric", reflect.TypeOf((*Mockstorage)(nil).GetMetric), key)
}

// SetMetrics mocks base method.
func (m *Mockstorage) SetMetrics(metric []entity.Metric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMetrics", metric)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMetrics indicates an expected call of SetMetrics.
func (mr *MockstorageMockRecorder) SetMetrics(metric interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMetrics", reflect.TypeOf((*Mockstorage)(nil).SetMetrics), metric)
}
